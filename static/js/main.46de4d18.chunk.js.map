{"version":3,"sources":["slider/render/Handle.js","slider/render/Knob.js","slider/render/Rail.js","utils.js","slider/Slider.js","App.js","index.js"],"names":["Handle","position","isActive","props","className","style","left","draggable","Knob","type","isColored","modifierClasses","join","Rail","coloredRailPositions","coloredRail","Array","isArray","length","startPos","endPos","right","sortAsc","numArr","sort","a","b","Slider","clickEndHandler","setActiveHandleIndex","mouseMoveHandler","e","drag","pageX","touchMoveHandler","touches","ref","React","createRef","state","activeHandleIndex","document","addEventListener","this","removeEventListener","snapToThresholds","forEach","snapToPos","threshold","cursorX","cursorValue","values","min","max","collisionsEnabled","snapToEnabled","onChange","cursorPosition","sliderCoordinates","sliderPixelLength","calculateSnappedPosition","positionToValue","newValues","handleIndex","setState","handles","handlePositions","map","onMouseDown","onTouchStart","knobs","knobIsColored","current","getBoundingClientRect","top","bottom","val","value","valueToPosition","coloredRailEnabled","sortedHandlePositions","slice","filter","snapToThreshold","isNaN","Component","defaultProps","App","useState","setValues","setColoredRailEnabled","setSnapToEnabled","setCollisionsEnabled","valueInputs","i","width","margin","newValue","target","index","marginRight","onClick","id","checked","htmlFor","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.46de4d18.chunk.js","sourcesContent":["import React from 'react';\n\nconst Handle = ({ position, isActive, ...props }) => (\n    <div\n        className={`Slider_handle ${ isActive ? 'Slider_handle-active' : '' }`}\n        style={{ left: `${position}%` }}\n        draggable=\"false\"\n        {...props}\n    > </div>\n);\n\nexport default Handle;","import React from 'react';\n\nconst Knob = ({ position, type, isColored }) => {\n    const modifierClasses = [\n        `Slider_knob-${type}`,\n        (isColored) ? 'Slider_knob-colored' : ''\n    ].join(' ');\n\n    return (\n        <div\n            className={`Slider_knob ${modifierClasses}`}\n            style={{ left: `${position}%` }}\n        > </div>\n    );\n};\n\nexport default Knob;","import React from 'react';\n\nconst Rail = ({ coloredRailPositions }) => {\n    let coloredRail = null;\n\n    if (Array.isArray(coloredRailPositions) && coloredRailPositions.length === 2) {\n        const [ startPos, endPos ] = coloredRailPositions;\n        coloredRail = (\n            <div\n                className=\"Slider_rail Slider_rail-colored\"\n                style={{ left: `${startPos}%`, right: `${100 - endPos}%` }}\n            > </div>\n        );\n    }\n\n    return (\n        <div className=\"Slider_rail\">\n            {coloredRail}\n        </div>\n    );\n};\n\nexport default Rail;","export const sortAsc = numArr => [...numArr].sort((a, b) => a - b);\n\nexport const valueToPosition = (value, min, max) => (value - min) / (max - min) * 100;\n\nexport const positionToValue = (position, min, max) => ((position / 100) * (max - min)) + min;","import React from 'react';\nimport Handle from './render/Handle';\nimport Knob from \"./render/Knob\";\nimport Rail from \"./render/Rail\";\nimport {sortAsc, valueToPosition, positionToValue} from '../utils';\n\nclass Slider extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n        this.state = { activeHandleIndex: null };\n    }\n\n    // Lifecycle hooks\n\n    componentDidMount() {\n        document.addEventListener('mousemove', this.mouseMoveHandler);\n        document.addEventListener('touchmove', this.touchMoveHandler);\n        document.addEventListener('mouseup', this.clickEndHandler);\n        document.addEventListener('touchend', this.clickEndHandler);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousemove', this.mouseMoveHandler);\n        document.removeEventListener('touchmove', this.touchMoveHandler);\n        document.removeEventListener('mouseup', this.clickEndHandler);\n        document.removeEventListener('touchend', this.clickEndHandler);\n    }\n\n    // Component getters\n\n    /**\n     * Coordinates, in pixels, of the slider component in the DOM.\n     * @returns {{top: number|null, left: number|null, bottom: number|null, right: number|null}}\n     */\n    get sliderCoordinates() {\n        return this.ref.current !== null\n            ? this.ref.current.getBoundingClientRect()\n            : { left: null, right: null, top: null, bottom: null };\n    }\n\n    /**\n     * The length of this slider component in pixels.\n     * @returns {number}\n     */\n    get sliderPixelLength() {\n        const { left, right } = this.sliderCoordinates;\n        return right - left;\n    }\n\n    /**\n     * The handle's positions are a percentage distance down the rail\n     * (using css `left: X%`). Need to scale the values from a range of min/max\n     * to 0/1 and multiply by 100 for a percent.\n     * @returns {number[]}\n     */\n    get handlePositions() {\n        const { values, min, max } = this.props;\n        return values.map(val => valueToPosition(val, min, max));\n    }\n\n    /**\n     * Start and stop positions of the colored rail.\n     * @returns {number[]|null} - [ startPos, endPos ]\n     */\n    get coloredRailPositions() {\n        if (!this.props.coloredRailEnabled || this.handlePositions.length < 1) {\n            return null;\n        }\n\n        if (this.handlePositions.length === 1) {\n            return [ 0, this.handlePositions[0] ];\n        } else {\n            const sortedHandlePositions = sortAsc(this.handlePositions);\n            return [\n                sortedHandlePositions[0],\n                sortedHandlePositions.slice(-1)\n            ];\n        }\n    }\n\n    /**\n     * An array of tuples representing positions that can be snapped to (e.g. 25%) and the distance in\n     * percentage points that a handle needs to be away from that position in order to snap.\n     * @returns {number[][]} - [ position, snapToThreshold ]\n     */\n    get snapToThresholds() {\n        return this.props.knobs\n            .filter(({ snapToThreshold }) => !isNaN(snapToThreshold) && snapToThreshold > 0)\n            .map(({ position, snapToThreshold }) => [ position, snapToThreshold ]);\n    }\n\n    // Component methods\n\n    /**\n     * Determine if a knob is a part of the colored section of a rail and needs to be colored also.\n     * @param {number} position\n     * @returns {boolean}\n     */\n    knobIsColored(position) {\n        if (this.coloredRailPositions === null) {\n            return false;\n        }\n\n        const [ startPos, endPos ] = this.coloredRailPositions;\n\n        return startPos <= position && endPos >= position;\n    }\n\n    /**\n     * Loop over snapping positions/thresholds to determine if a position needs to snap to a new position.\n     * @param {number} position\n     * @returns {number} - the new position after snapping\n     */\n    calculateSnappedPosition(position) {\n        this.snapToThresholds.forEach(([ snapToPos, threshold ]) => {\n            const lowerBound = snapToPos - threshold;\n            const upperBound = snapToPos + threshold;\n            if (position >= lowerBound && position <= upperBound) {\n                position = snapToPos;\n            }\n        });\n\n        return position;\n    }\n\n    /**\n     * Calculate the new value from a dragged handle's position and call the `onChange` prop.\n     * @param {number} cursorX - the x position (in pixels) of the mouse\n     */\n    drag(cursorX) {\n        const { activeHandleIndex } = this.state;\n\n        if (activeHandleIndex !== null) {\n            const {\n                values,\n                min,\n                max,\n                collisionsEnabled,\n                snapToEnabled,\n                onChange\n            } = this.props;\n\n            // Convert the cursor's X position from pixels to a percentage of the slider's width\n            let cursorPosition = (cursorX - this.sliderCoordinates.left) / this.sliderPixelLength * 100;\n\n            if (snapToEnabled) {\n                cursorPosition = this.calculateSnappedPosition(cursorPosition);\n            }\n\n            let cursorValue;\n            if (cursorPosition < 0) {\n                // If slider goes below 0%, set it to min\n                cursorValue = min;\n            } else if (cursorPosition > 100) {\n                // If slider exceeds 100%, set it to the max\n                cursorValue = max;\n            } else {\n                // Convert from percentage-based position back to true value\n                cursorValue = positionToValue(cursorPosition, min, max);\n            }\n\n            let newValues = [ ...values ];\n            newValues[activeHandleIndex] = cursorValue;\n\n            // If collisions are enabled, sort the values in ascending order\n            if (collisionsEnabled) {\n                newValues = sortAsc(newValues);\n            }\n\n            onChange(newValues);\n        }\n    }\n\n    /**\n     * @param {number|null} handleIndex\n     */\n    setActiveHandleIndex(handleIndex) {\n        this.setState({ activeHandleIndex: handleIndex });\n    }\n\n    // Event handlers\n\n    /**\n     * Event handler for both `mouseup` and `touchend`.\n     */\n    clickEndHandler = () => this.setActiveHandleIndex(null);\n\n    mouseMoveHandler = e => this.drag(e.pageX);\n\n    touchMoveHandler = e => {\n        if (e.touches && e.touches.length > 0) {\n            this.drag(e.touches[0].pageX);\n        }\n    }\n\n    render() {\n        const handles = this.handlePositions.map((position, handleIndex) => (\n            <Handle\n                position={position}\n                isActive={this.state.activeHandleIndex === handleIndex}\n                onMouseDown={() => this.setActiveHandleIndex(handleIndex)}\n                onTouchStart={() => this.setActiveHandleIndex(handleIndex)}\n                key={`handle_${handleIndex}`}\n            />\n        ));\n\n        const knobs = this.props.knobs.map(({ position, type }) => (\n            <Knob\n                position={position}\n                type={type}\n                isColored={this.knobIsColored(position)}\n                key={`knob_${position}`}\n            />\n        ));\n\n        return (\n            <div className=\"Slider\" ref={this.ref}>\n                <Rail coloredRailPositions={this.coloredRailPositions} />\n                {handles}\n                {knobs}\n            </div>\n        );\n    }\n}\n\nSlider.defaultProps = {\n    coloredRailEnabled: true,\n    collisionsEnabled: true,\n    snapToEnabled: true,\n}\n\nexport default Slider;","import React, {useState} from 'react';\nimport Slider from \"./slider/Slider\";\n\nexport default function App() {\n    const min = 50;\n    const max = 150;\n\n    // State hooks\n    const [values, setValues] = useState([ 50, 100 ]);\n    const [coloredRailEnabled, setColoredRailEnabled] = useState(true);\n    const [snapToEnabled, setSnapToEnabled] = useState(true);\n    const [collisionsEnabled, setCollisionsEnabled] = useState(true);\n\n    // Event handlers\n    const valueChangeHandler = (newValue, index) => {\n        setValues(values.map(\n            (val, i) => i === index ? newValue : val\n        ));\n    }\n\n    const addValueHandler = () => {\n        setValues([ ...values, max ]);\n    }\n\n    const removeValueHandler = () => {\n        setValues(values.slice(0, values.length - 1));\n    }\n\n    // Computed value\n    const valueInputs = values.map((value, i) => (\n        <div key={i}>\n            <input\n                type=\"text\"\n                style={{ width: 100, margin: '0 5px 10px 20px' }}\n                value={value}\n                onChange={e => valueChangeHandler(e.target.value, i)}\n            />\n            ,\n        </div>\n    ));\n\n    return (\n        <div className=\"Demo Demo-full\">\n            <div className=\"SliderContainer\">\n                <h1 className=\"SliderContainer_header\">Demo:</h1>\n\n                <Slider\n                    values={values}\n                    min={min}\n                    max={max}\n                    knobs={[\n                        { position: 0, type: 'major', snapToThreshold: 3 },\n                        { position: 25, type: 'minor', snapToThreshold: 1 },\n                        { position: 50, type: 'normal', snapToThreshold: 1 },\n                        { position: 75, type: 'minor', snapToThreshold: 1 },\n                        { position: 100, type: 'major', snapToThreshold: 3 },\n                    ]}\n                    coloredRailEnabled={coloredRailEnabled}\n                    collisionsEnabled={collisionsEnabled}\n                    snapToEnabled={snapToEnabled}\n                    onChange={setValues}\n                />\n\n                <div className=\"SliderContainer_body\">\n                    <hr/>\n\n                    <div className=\"mb-10\"><b>values</b> = [</div>\n                    {valueInputs}\n                    <div className=\"mb-10\">]</div>\n\n                    <div className=\"mb-10\">\n                        <button style={{ marginRight: '10px' }} onClick={addValueHandler}>Add Value</button>\n                        <button onClick={removeValueHandler}>Remove Value</button>\n                    </div>\n\n                    <div>\n                        <input\n                            type=\"checkbox\"\n                            id=\"enableColoredRail\"\n                            checked={coloredRailEnabled}\n                            onChange={() => setColoredRailEnabled(!coloredRailEnabled)}\n                        />\n                        <label htmlFor=\"enableColoredRail\">Colored Rail Enabled</label>\n                    </div>\n\n                    <div>\n                        <input\n                            type=\"checkbox\"\n                            id=\"enableSnapTo\"\n                            checked={snapToEnabled}\n                            onChange={() => setSnapToEnabled(!snapToEnabled)}\n                        />\n                        <label htmlFor=\"enableSnapTo\">Snap To Enabled</label>\n                    </div>\n\n                    <div>\n                        <input\n                            type=\"checkbox\"\n                            id=\"enableCollisions\"\n                            checked={collisionsEnabled}\n                            onChange={() => setCollisionsEnabled(!collisionsEnabled)}\n                        />\n                        <label htmlFor=\"enableSnapTo\">Handle Collisions Enabled</label>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/App.css';\nimport './styles/Slider.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}